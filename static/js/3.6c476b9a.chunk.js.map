{"version":3,"sources":["assets/svg/agile.svg","components/BrandName/index.jsx","actions/users.js","assets/svg/like.svg","assets/svg/check.svg","layouts/Dashboard/Header/index.jsx","containers/Header.js","layouts/Dashboard/ProjectHeader/index.jsx","actions/tasks.js","containers/ProjectHeader.js","layouts/Dashboard/ProjectBoard/BoardList/Board/TaskIcon/index.jsx","layouts/Dashboard/ProjectBoard/BoardList/Board/index.jsx","containers/Board.js","layouts/Dashboard/ProjectBoard/BoardList/index.jsx","containers/BoardList.js","layouts/Dashboard/ProjectBoard/index.jsx","containers/ProjectBoard.js","layouts/Dashboard/index.jsx"],"names":["module","exports","BrandName","className","userAuthentication","payload","dispatch","getState","username","index","users","userList","some","password","indexOfLoggedUser","findIndex","type","ActionTypes","UPDATE_LOGIN_STATUS_BY_INDEX","UPDATE_USER_NAME","resetUsers","RESET_USERS","Header","currentUser","src","AgilifyLogo","alt","id","href","onClick","connect","state","bindActionCreators","withRouter","sprintName","history","hasAccessToComplete","moveTaskToComplete","push","swapTasks","SWAP_TASKS","moveTask","MOVE_TASK","MOVE_TASK_COMPLETE","tasks","checkAccess","ProjectHeader","find","role","TaskIcon","TASK_TYPE","STORY","StorySvg","TaskSvg","Board","props","draggable","onDragStart","e","dragIndex","dataTransfer","setData","taskId","onDragOver","preventDefault","onDrop","dropIndex","dragTaskId","getData","dropTaskId","description","assignee","React","memo","name","taskList","statusId","replace","map","data","key","getTaskBasedOnRole","BoardList","filter","status","ProjectBoard","statusList","statusName"],"mappings":"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","file":"static/js/3.6c476b9a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/agile.ba108974.svg\";","import React from \"react\";\n\nconst BRAND_NAME = \"agilify\";\n\nconst BrandName = () => {\n  return <h1 className=\"brand-text\">{BRAND_NAME}</h1>;\n};\n\nexport default BrandName;\n","import ActionTypes from \"action-types\";\n\nexport function userAuthentication(payload) {\n  return (dispatch, getState) => {\n    const { users } = getState();\n    const isAuthenticated = users.userList.some(\n      ({ username, password }) =>\n        username === payload.username && password === payload.password\n    );\n    if (isAuthenticated) {\n      const indexOfLoggedUser = users.userList.findIndex(\n        ({ username, password }) =>\n          username === payload.username && password === payload.password\n      );\n      dispatch(updateLoginStatusByIndex(indexOfLoggedUser));\n      dispatch(updateUserName(payload.username));\n    }\n  };\n}\n\nexport function updateLoginStatusByIndex(index) {\n  return {\n    type: ActionTypes.UPDATE_LOGIN_STATUS_BY_INDEX,\n    payload: index\n  };\n}\n\nexport function updateUserName(username) {\n  return {\n    type: ActionTypes.UPDATE_USER_NAME,\n    payload: username\n  };\n}\n\nexport function resetUsers() {\n  return {\n    type: ActionTypes.RESET_USERS\n  };\n}\n","module.exports = __webpack_public_path__ + \"static/media/like.630b237a.svg\";","module.exports = __webpack_public_path__ + \"static/media/check.ee1dae7e.svg\";","import React from \"react\";\nimport AgilifyLogo from \"assets/svg/agile.svg\";\nimport BrandName from \"components/BrandName\";\n\nconst Header = ({ currentUser, resetUsers }) => {\n  return (\n    <header>\n      <div className=\"logo\">\n        <img src={AgilifyLogo} alt=\"Agilify logo\" />\n        <BrandName />\n      </div>\n      <i className=\"fa fa-bars hamburger\"></i>\n      <nav id=\"menu\">\n        <p> {currentUser}</p>\n        <p>\n          <a href=\"#\" onClick={() => resetUsers()}>\n            sign out\n          </a>\n        </p>\n      </nav>\n    </header>\n  );\n};\n\nexport default Header;\n","import { connect } from \"react-redux\";\nimport Header from \"layouts/Dashboard/Header\";\nimport { bindActionCreators } from \"redux\";\nimport { resetUsers } from \"actions/users\";\n\nconst mapStateToProps = state => ({\n  currentUser: state.users.currentUser\n});\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators(\n    {\n      resetUsers\n    },\n    dispatch\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nconst ProjectHeader = ({\n  sprintName,\n  history,\n  hasAccessToComplete,\n  moveTaskToComplete\n}) => {\n  const clickCompleteButton = () => {\n    moveTaskToComplete();\n    history.push(\"/completed\");\n  };\n  return (\n    <div className=\"project-header\">\n      <div className=\"project-header-title\">\n        <h1>{sprintName}</h1>\n      </div>\n      <div className=\"project-timeline\">\n        {hasAccessToComplete && (\n          <button type=\"button\" onClick={() => clickCompleteButton()}>\n            complete\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default withRouter(ProjectHeader);\n","import ActionTypes from \"action-types\";\n\nexport function swapTasks(payload) {\n  return {\n    type: ActionTypes.SWAP_TASKS,\n    payload\n  };\n}\n\nexport function moveTask(payload) {\n  return {\n    type: ActionTypes.MOVE_TASK,\n    payload\n  };\n}\n\nexport function moveTaskToComplete() {\n  return {\n    type: ActionTypes.MOVE_TASK_COMPLETE\n  };\n}\n","import { connect } from \"react-redux\";\nimport ProjectHeader from \"layouts/Dashboard/ProjectHeader\";\nimport { bindActionCreators } from \"redux\";\nimport { moveTaskToComplete } from \"actions/tasks\";\n\nconst mapStateToProps = state => ({\n  sprintName: state.tasks.sprintName,\n  hasAccessToComplete: checkAccess(state)\n});\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({ moveTaskToComplete }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProjectHeader);\n\nconst checkAccess = state => {\n  const role = state.users.userList.find(\n    ({ username }) => username === state.users.currentUser\n  ).role;\n  return role !== 1 ? false : true;\n};\n","import React from \"react\";\nimport StorySvg from \"assets/svg/like.svg\";\nimport TaskSvg from \"assets/svg/check.svg\";\n\nimport { TASK_TYPE } from \"static\";\n\nconst TaskIcon = ({ type }) => {\n  return <img src={type === TASK_TYPE.STORY ? StorySvg : TaskSvg} alt={type} />;\n};\n\nexport default TaskIcon;\n","import React from \"react\";\nimport TaskIcon from \"./TaskIcon\";\n\nconst Board = props => {\n  const onDragStart = (e, dragIndex) => {\n    e.dataTransfer.setData(\"dragIndex\", dragIndex);\n  };\n\n  const onDragOver = (e, taskId) => {\n    e.preventDefault();\n  };\n\n  const onDrop = (e, dropIndex) => {\n    props.swapTasks({\n      dragTaskId: e.dataTransfer.getData(\"dragIndex\"),\n      dropTaskId: dropIndex\n    });\n  };\n\n  return (\n    <div\n      className=\"project-board-card-content-list\"\n      draggable={true}\n      onDragStart={e => onDragStart(e, props.taskId)}\n      onDragOver={e => onDragOver(e, props.taskId)}\n      onDrop={e => onDrop(e, props.taskId)}\n    >\n      <div>\n        <p>{props.description}</p>\n      </div>\n      <div className=\"project-board-card-content-list-footer\">\n        <div className=\"task-id\">\n          <TaskIcon type={props.type} />\n          <p>{props.taskId || \"SC-112\"}</p>\n        </div>\n        <div className=\"assignee\">{props.assignee || \"ram\"}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Board;\n","import { connect } from \"react-redux\";\nimport Board from \"layouts/Dashboard/ProjectBoard/BoardList/Board\";\nimport { bindActionCreators } from \"redux\";\nimport { swapTasks } from \"actions/tasks\";\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators(\n    {\n      swapTasks\n    },\n    dispatch\n  );\n};\n\nexport default connect(null, mapDispatchToProps)(Board);\n","import React from \"react\";\nimport Board from \"containers/Board\";\nconst BoardList = ({ name, id, taskList, moveTask }) => {\n  const onDragStart = (e, id) => {\n    e.dataTransfer.setData(\"statusId\", id);\n  };\n\n  const onDragOver = e => {\n    e.preventDefault();\n  };\n\n  const onDrop = (e, id) => {\n    moveTask({\n      statusId: id,\n      taskId: e.dataTransfer.getData(\"dragIndex\")\n    });\n  };\n  return (\n    <div\n      className=\"project-board-card\"\n      draggable={true}\n      onDragStart={e => onDragStart(e, id)}\n      onDragOver={e => onDragOver(e)}\n      onDrop={e => onDrop(e, id)}\n    >\n      <div className=\"project-board-card-header\">\n        <p>{name.replace(\"_\", \" \")}</p>\n      </div>\n      <div className=\"project-board-card-content\">\n        {taskList.map((data, index) => {\n          return <Board key={`${name}-${index} `} {...data} index={index} />;\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(BoardList);\n","import { connect } from \"react-redux\";\nimport BoardList from \"layouts/Dashboard/ProjectBoard/BoardList\";\nimport { bindActionCreators } from \"redux\";\nimport { moveTask } from \"actions/tasks\";\n\nconst mapStateToProps = (state, props) => ({\n  taskList: getTaskBasedOnRole(state, props)\n});\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({ moveTask }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardList);\n\nconst getTaskBasedOnRole = (state, props) => {\n  const role = state.users.userList.find(\n    ({ username, role }) => username === state.users.currentUser\n  ).role;\n  if (role === 1) {\n    return state.tasks.taskList.filter(({ status }) => status === props.id);\n  } else {\n    return state.tasks.taskList.filter(\n      ({ status, assignee }) =>\n        status === props.id && assignee === state.users.currentUser\n    );\n  }\n};\n","import React from \"react\";\nimport BoardList from \"containers/BoardList\";\n\nconst ProjectBoard = ({ statusList }) => {\n  return (\n    <div className=\"project-board\">\n      {statusList.map(({ statusId, statusName }) => {\n        return (\n          <BoardList\n            key={`Status-${statusId}`}\n            id={statusId}\n            name={statusName}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default ProjectBoard;\n","import { connect } from \"react-redux\";\nimport ProjectBoard from \"layouts/Dashboard/ProjectBoard\";\nimport { bindActionCreators } from \"redux\";\n\nconst mapStateToProps = state => ({\n  statusList: state.status.filter(\n    ({ statusName }) => \"COMPLETED\" !== statusName\n  )\n});\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({}, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProjectBoard);\n","import React from \"react\";\nimport Header from \"containers/Header\";\nimport ProjectHeader from \"containers/ProjectHeader\";\nimport ProjectBoard from \"containers/ProjectBoard\";\n\nexport default () => {\n  return (\n    <>\n      <Header />\n      <div className=\"dashboard\">\n        <ProjectHeader />\n        <ProjectBoard />\n      </div>\n    </>\n  );\n};\n"],"sourceRoot":""}